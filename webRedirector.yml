#!! THIS SCRIPT WAS BUILT FOR UBUNTU 19.04, IT MAY NOT WORK PROPERLY ON OTHER UNIX VARIANTS!!
#As of June 2020, it does not work on UBUNTU 20 because certbot/letsencrypt has issues with python2.7 being removed or something like that

#This script will configure a server to act as a Web Redirector:
  #Configure firewall rules
  #Install and configure Apache - for mod_rewrite functionality
  #Generate LetsEncrpyt SSL Certs for specified domain and subdomains
  #Converts SSL certs to .p12 format for Cobalt Strike
  #Downloads LetsEncrypt SSL and .p12 certs to Ansible Server
  #Includes functionality to upload preconfigured .htaccess and .rules files

#This was built using information from these two sources https://bluescreenofjeff.com/2018-04-12-https-payload-and-c2-redirectorIps/ and https://raw.githubusercontent.com/killswitch-GUI/CobaltStrike-ToolKit/master/HTTPsC2DoneRight.sh
---
- hosts: redirector

  gather_facts: no
  
  vars_prompt:
    - name: "sslCertpassword" 
      prompt: "Enter password for SSL cert, used in creating .p12 for CobaltStrike" 
      private: yes 
      
  vars:
    unpriv_user_name: <user name>
    
    domain: <domain.com>

    ###NOTE: Only include www.* if you have a DNS A record for www for the domain and subdomain
    ###Note: Create a CNAME Record for www.host.com
    ###NOTE: Perform this task after you set up DNS, make sure to provide DNS plenty of time to propegate. LetsEncrypt needs to be able to resolve the hostnames and reach out to them.
    letsencryptCommand: '/home/{{ unpriv_user_name }}/letsencrypt/letsencrypt-auto certonly --standalone -d <domain.com> -d <www.domain.com> -d <subDomain1.domain.com> -d <www.subDomain1.domain.com> -n --register-unsafely-without-email --agree-tos'

    #htaccessFile: <path>

    #htaccessRulesFile: <path>

    required_packages:
      - openjdk-11-jdk
      - apache2
      - git

  tasks:   
    #Setup firewall
    - name: Allow HTTP traffic - 80
      become: true
      ufw:
        rule: allow
        port: 80
        proto: tcp
      
    - name: Allow HTTPS traffic - 443
      become: true
      ufw:
        rule: allow
        port: 443
        proto: tcp 

    #Install required software
    - name: Install required packages
      become: true
      apt: state=present pkg="{{ required_packages}}"
      
    - name: Make OpenJDK 11 the default
      become: true
      command: update-java-alternatives -s java-1.11.0-openjdk-amd64
      
    - name: Download Certbot/LetsEncrypt from GitHub
      git:
        repo: https://github.com/certbot/certbot
        dest: /home/{{ unpriv_user_name }}/letsencrypt
      
    #Configure Apache
    - name: a2enmod
      become: true
      shell: a2enmod ssl rewrite proxy proxy_http
      
    - name: a2ensite
      become: true
      shell: a2ensite default-ssl.conf

    - name: restart Apache
      become: true
      service:
        name: apache2
        state: restarted
        
    - name: Modify apache2.conf
      become: true
      replace: 
        path: /etc/apache2/apache2.conf
        regexp: (?<=<Directory \/var\/www\/>\n\sOptions Indexes FollowSymLinks\n)(.*)(?=\n)
        replace: '  AllowOverride All'
        
    - name: stop Apache
      become: true
      service:
        name: apache2
        state: stopped
   
    #Configure Apache SSL - Generate LetsEncrypt SSL certs
    - name: Generate LetsEncrypt cert for primary domain and subdomains
      become: true
      shell: '{{ letsencryptCommand }}'
      args: 
        chdir: /home/{{ unpriv_user_name }}/letsencrypt

    - name: Modify default-ssl.conf part 1     
      become: true
      replace: 
        path: /etc/apache2/sites-enabled/default-ssl.conf
        regexp: ^.\s*SSLCertificateFile.*$
        replace: '          	SSLCertificateFile      /etc/letsencrypt/live/{{ domain }}/cert.pem'

    - name: Modify default-ssl.conf part 2     
      become: true
      replace: 
        path: /etc/apache2/sites-enabled/default-ssl.conf
        regexp: ^.\s*SSLCertificateKeyFile.*$
        replace: '          	SSLCertificateKeyFile      /etc/letsencrypt/live/{{ domain }}/privkey.pem'
      
    - name: Modify default-ssl.conf part 3
      become: true
      lineinfile: 
        dest: /etc/apache2/sites-enabled/default-ssl.conf
        insertafter: '^.*<VirtualHost _default_:443>.*$'
        line: "{{ item.line }}"
      with_items:
        - {line: '          	# Enable SSL'}
        - {line: '          	SSLEngine On'}
        - {line: '          	# Enable Proxy'}
        - {line: '          	SSLProxyEngine On'}
        - {line: '          	# Trust Self-Signed Certificates generated by Cobalt Strike'}
        - {line: '          	SSLProxyVerify none'}
        - {line: '          	SSLProxyCheckPeerCN off'}
        - {line: '          	SSLProxyCheckPeerName off'}
       
    #Generate certs for CobaltStrike
    - name: Build PKCS12 .p12 cert
      become: true
      shell: "openssl pkcs12 -export -in /etc/letsencrypt/live/{{ domain }}/fullchain.pem -inkey /etc/letsencrypt/live/{{ domain }}/privkey.pem -out {{ domain }}.p12 -name {{ domain }} -passout pass:{{ sslCertpassword }}"
    
    - name: Download SSL privatekey PEM files to Ansible Server
      become: true
      fetch:
        src: "/etc/letsencrypt/live/{{ domain }}/privkey.pem"
        dest: "privkey.pem"
        flat: yes
        
    - name: Download SSL fullchain PEM files to Ansible Server
      become: true
      fetch:
        src: "/etc/letsencrypt/live/{{ domain }}/fullchain.pem"
        dest: "fullchain.pem"
        flat: yes

    - name: Download SSL fullchain .p12 for CobaltStrike to aAnsible Server
      become: true
      fetch:
        src: "{{ domain }}.p12"
        dest: "{{ domain }}.p12"
        flat: yes

    #Apache mod rewrite 
    - name: a2dismod - disable mod_deflate
      become: true
      shell: a2dismod deflate -f 

    - name: a2enmod enable required rewrite modules -f
      become: true
      shell: a2enmod rewrite proxy proxy_http
      
    - name: start Apache
      become: true
      service:
        name: apache2
        state: started
        
    #Upload .htaccess and redirect rules from Ansible Server
   # - name: Upload .htaccess file from Ansible Server
   #   become: true
   #   copy:
   #     src: "{{ htaccessFile }}"
    #    dest: "/var/www/html/.htaccess"

    #- name: Upload .htaccess redirect rules from Ansible Server
    #  become: true
     # copy:
     #   src: "{{ htaccessRulesFile }}"
    #    dest: "/var/www/html/redirect.rules"
